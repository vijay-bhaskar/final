{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/somav/frontend/hapsync-frontend-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(callEventTypes),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(fetchEventTypesSaga);import axios from'axios';import{all,call,put,takeLatest}from'redux-saga/effects';import{fetchEventTypesError,fetchEventTypesSuccess}from'./eventTypeActions';import{FETCH_EVENT_TYPES}from'./eventTypeConstants';var getEventTypes=function getEventTypes(){return axios.get('http://localhost:8080/pulp-events/suggestions/events');};export function callEventTypes(){var response;return _regeneratorRuntime.wrap(function callEventTypes$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return call(getEventTypes);case 3:response=_context.sent;_context.next=6;return put(fetchEventTypesSuccess({eventTypes:response.data}));case 6:_context.next=12;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);_context.next=12;return put(fetchEventTypesError({error:'Failed to Get Event Types'}));case 12:case\"end\":return _context.stop();}}},_marked,null,[[0,8]]);}export default function fetchEventTypesSaga(){return _regeneratorRuntime.wrap(function fetchEventTypesSaga$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return all([takeLatest(FETCH_EVENT_TYPES,callEventTypes)]);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["C:/Users/somav/frontend/hapsync-frontend-1/src/Suggestions/EventTypes/store/eventTypeSaga.ts"],"names":["callEventTypes","fetchEventTypesSaga","axios","all","call","put","takeLatest","fetchEventTypesError","fetchEventTypesSuccess","FETCH_EVENT_TYPES","getEventTypes","get","response","eventTypes","data","error"],"mappings":"0MAQiBA,c,iDAiBQC,mB,EAzBzB,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,CAAcC,IAAd,CAAoBC,GAApB,CAAyBC,UAAzB,KAA2C,oBAA3C,CACA,OAASC,oBAAT,CAA+BC,sBAA/B,KAA6D,oBAA7D,CACA,OAASC,iBAAT,KAAkC,sBAAlC,CAGA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,SAAMR,CAAAA,KAAK,CAACS,GAAN,CAAiC,sDAAjC,CAAN,EAAtB,CAEA,MAAO,SAAUX,CAAAA,cAAV,uKAEgC,MAAMI,CAAAA,IAAI,CAACM,aAAD,CAAV,CAFhC,OAEOE,QAFP,+BAGC,MAAMP,CAAAA,GAAG,CACLG,sBAAsB,CAAC,CACnBK,UAAU,CAAED,QAAQ,CAACE,IADF,CAAD,CADjB,CAAT,CAHD,uGASC,MAAMT,CAAAA,GAAG,CACLE,oBAAoB,CAAC,CACjBQ,KAAK,CAAE,2BADU,CAAD,CADf,CAAT,CATD,oEAiBP,cAAe,SAAUd,CAAAA,mBAAV,mJACX,MAAME,CAAAA,GAAG,CAAC,CAACG,UAAU,CAACG,iBAAD,CAAoBT,cAApB,CAAX,CAAD,CAAT,CADW","sourcesContent":["import axios from 'axios';\nimport { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { fetchEventTypesError, fetchEventTypesSuccess } from './eventTypeActions';\nimport { FETCH_EVENT_TYPES } from './eventTypeConstants';\nimport { EventType } from '../EventTypeModels';\n\nconst getEventTypes = () => axios.get<{ data: EventType[] }>('http://localhost:8080/pulp-events/suggestions/events');\n\nexport function* callEventTypes() {\n    try {\n        const response: { data: [] } = yield call(getEventTypes);\n        yield put(\n            fetchEventTypesSuccess({\n                eventTypes: response.data,\n            }),\n        );\n    } catch (e) {\n        yield put(\n            fetchEventTypesError({\n                error: 'Failed to Get Event Types',\n            }),\n        );\n    }\n}\n\nexport default function* fetchEventTypesSaga() {\n    yield all([takeLatest(FETCH_EVENT_TYPES, callEventTypes)]);\n}\n"]},"metadata":{},"sourceType":"module"}