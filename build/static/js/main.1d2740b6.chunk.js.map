{"version":3,"sources":["Suggestions/Activities/store/activityConstants.ts","Suggestions/Activities/store/activityReducer.ts","Suggestions/EventTypes/store/eventTypeConstants.ts","Suggestions/EventTypes/store/eventTypeReducer.ts","Events/CreateEvents/store/createEventConstants.ts","Events/CreateEvents/store/createEventReducer.ts","reducers.ts","Events/CreateEvents/store/createEventActions.ts","Events/CreateEvents/store/createEventSaga.ts","Suggestions/Activities/store/activityActions.ts","Suggestions/Activities/store/activitySaga.ts","Suggestions/EventTypes/store/eventTypeActions.ts","Suggestions/EventTypes/store/eventTypeSaga.ts","sagas.ts","store.ts","Events/CreateEvents/createEvent.tsx","Events/CreateEvents/index.tsx","Home/home.tsx","Suggestions/Activities/activity.tsx","Suggestions/Activities/index.tsx","routes.ts","index.tsx"],"names":["FETCH_ACTIVITIES","FETCH_ACTIVITIES_SUCCESS","FETCH_ACTIVITIES_ERROR","initialState","activities","error","isLoading","ActivitiesReducer","state","action","type","data","FETCH_EVENT_TYPES","FETCH_EVENT_TYPES_SUCCESS","FETCH_EVENT_TYPES_ERROR","eventTypes","EventTypesReducer","CREATE_EVENT","CREATE_EVENT_SUCCESS","initialEventState","message","CreateEventReducer","rootReducer","combineReducers","events","createEvent","EventReducer","CreateEventSuccess","createEventSaga","createEventCall","axios","post","call","response","put","all","takeLatest","fetchActivities","eventId","fetchActivitiesError","callActivities","fetchActivitiesSaga","id","get","fetchEventTypesError","callEventTypes","fetchEventTypesSaga","getEventTypes","rootSaga","fork","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","logger","run","CreateEventComponent","activityTypes","fetchEventTypes","CreateEvent","useEffect","useState","evntTypeId","setEvntTypeId","actvts","setActvts","useForm","handleSubmit","control","onSubmit","console","log","eventData","name","eventTypeId","userId","date","location","createdDate","Date","owner","budget","className","defaultValue","render","field","Input","disableUnderline","isClearable","options","getOptionLabel","option","eventTypeName","getOptionValue","onChange","e","undefined","placeholderText","showPreviousMonths","selected","value","minDate","calendarClassName","dateFormat","isMulti","activityTypeName","activityTypeId","forEach","actvty","activity","cost","dueDate","push","handleActivitiesCreate","dispatchActions","connect","Home","history","useHistory","onClick","Activity","useParams","acvts","map","activityTypeDescription","routes","path","component","App","route","index","props","ReactDOM","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.1d2740b6.chunk.js","sourcesContent":["export const FETCH_ACTIVITIES = 'FETCH_ACTIVITIES';\nexport const FETCH_ACTIVITIES_SUCCESS = 'FETCH_ACTIVITIES_SUCCESS';\nexport const FETCH_ACTIVITIES_ERROR = 'FETCH_ACTIVITIES_ERROR';\n","import { FETCH_ACTIVITIES, FETCH_ACTIVITIES_ERROR, FETCH_ACTIVITIES_SUCCESS } from './activityConstants';\nimport { ActivitiesActions, ActivitiesState } from '../activityModels';\n\nconst initialState: ActivitiesState = {\n    activities: [],\n    error: '',\n    isLoading: false,\n};\n\nfunction ActivitiesReducer(state = initialState, action: ActivitiesActions) {\n    switch (action.type) {\n        case FETCH_ACTIVITIES:\n            return {\n                ...state,\n                isLoading: true,\n                error: '',\n                activities: [],\n            };\n        case FETCH_ACTIVITIES_SUCCESS:\n            return {\n                ...state,\n                isLoading: false,\n                error: '',\n                activities: action.data.activities,\n            };\n        case FETCH_ACTIVITIES_ERROR:\n            return {\n                ...state,\n                isLoading: true,\n                error: action.data.error,\n                activities: [],\n            };\n        default:\n            return {\n                ...state,\n            };\n    }\n}\n\nexport default ActivitiesReducer;\n","export const FETCH_EVENT_TYPES = 'FETCH_EVENT_TYPES';\nexport const FETCH_EVENT_TYPES_SUCCESS = 'FETCH_EVENT_TYPES_SUCCESS';\nexport const FETCH_EVENT_TYPES_ERROR = 'FETCH_EVENT_TYPES_ERROR';\n","import { FETCH_EVENT_TYPES, FETCH_EVENT_TYPES_ERROR, FETCH_EVENT_TYPES_SUCCESS } from './eventTypeConstants';\nimport { EventTypesActions, EventTypesState } from '../EventTypeModels';\n\nconst initialState: EventTypesState = {\n    eventTypes: [],\n    error: '',\n    isLoading: false,\n};\n\nfunction EventTypesReducer(state = initialState, action: EventTypesActions) {\n    switch (action.type) {\n        case FETCH_EVENT_TYPES:\n            return {\n                ...state,\n                isLoading: true,\n                error: '',\n                eventTypes: [],\n            };\n        case FETCH_EVENT_TYPES_SUCCESS:\n            return {\n                ...state,\n                isLoading: false,\n                error: '',\n                eventTypes: action.data.eventTypes,\n            };\n        case FETCH_EVENT_TYPES_ERROR:\n            return {\n                ...state,\n                isLoading: true,\n                error: action.data.error,\n                eventTypes: [],\n            };\n        default:\n            return {\n                ...state,\n            };\n    }\n}\n\nexport default EventTypesReducer;\n","export const CREATE_EVENT = 'CREATE_EVENT';\nexport const CREATE_EVENT_SUCCESS = 'CREATE_EVENT_SUCCESS';\nexport const CREATE_EVENT_ERROR = 'CREATE_EVENT_ERROR';\n","import { CREATE_EVENT, CREATE_EVENT_SUCCESS } from './createEventConstants';\nimport { CreateEventActions, CreateEventState } from '../../eventModels';\n\nconst initialEventState: CreateEventState = {\n    message: '',\n    error: '',\n    isLoading: false,\n};\n\nfunction CreateEventReducer(state = initialEventState, action: CreateEventActions): CreateEventState {\n    switch (action.type) {\n        case CREATE_EVENT:\n            return {\n                ...state,\n                isLoading: true,\n                error: '',\n            };\n        case CREATE_EVENT_SUCCESS:\n            return {\n                ...state,\n                isLoading: false,\n                error: '',\n                message: action.data,\n            };\n\n        default:\n            return {\n                ...state,\n            };\n    }\n}\n\nexport default CreateEventReducer;\n","import { combineReducers } from 'redux';\nimport ActivitiesReducer from './Suggestions/Activities/store/activityReducer';\nimport EventTypesReducer from './Suggestions/EventTypes/store/eventTypeReducer';\nimport EventReducer from './Events/CreateEvents/store/createEventReducer';\n\nconst rootReducer = combineReducers({\n    events: EventTypesReducer,\n    activities: ActivitiesReducer,\n    createEvent: EventReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { CREATE_EVENT, CREATE_EVENT_SUCCESS } from './createEventConstants';\n\nimport { CreateEventRequest, CreateEventRequestModel, CreateEventSuccessRequest } from '../../eventModels';\n\nexport const CreateEvent = (data: CreateEventRequestModel): CreateEventRequest => ({\n    type: CREATE_EVENT,\n    data,\n});\n\nexport const CreateEventSuccess = (data: string): CreateEventSuccessRequest => ({\n    type: CREATE_EVENT_SUCCESS,\n    data,\n});\n","import axios from 'axios';\nimport { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { CreateEventSuccess } from './createEventActions';\nimport { CREATE_EVENT } from './createEventConstants';\nimport { CreateEventRequestModel } from '../../eventModels';\nimport { AnyAction } from 'redux';\n\nconst createEventCall = (data: CreateEventRequestModel) => {\n    return axios.post<string>('http://localhost:8080/pulp-events/event', data);\n};\n\nexport function* createEvent({ data }: AnyAction) {\n    try {\n        const response: string = yield call(() => {\n            return createEventCall(data);\n        });\n\n        yield put(CreateEventSuccess(response));\n    } catch (e) {}\n}\n\nexport function* createEventSaga() {\n    yield all([takeLatest(CREATE_EVENT, createEvent)]);\n}\n","import { FETCH_ACTIVITIES, FETCH_ACTIVITIES_ERROR, FETCH_ACTIVITIES_SUCCESS } from './activityConstants';\nimport {\n    FetchActivitiesFailureData,\n    FetchActivitiesFailureRequest,\n    FetchActivitiesRequest,\n    FetchActivitiesSuccessData,\n    FetchActivitiesSuccessRequest,\n} from '../activityModels';\n\nexport const fetchActivities = (eventId: number): FetchActivitiesRequest => ({\n    type: FETCH_ACTIVITIES,\n    eventId,\n});\n\nexport const fetchActivitiesSuccess = (data: FetchActivitiesSuccessData): FetchActivitiesSuccessRequest => ({\n    type: FETCH_ACTIVITIES_SUCCESS,\n    data,\n});\n\nexport const fetchActivitiesError = (data: FetchActivitiesFailureData): FetchActivitiesFailureRequest => ({\n    type: FETCH_ACTIVITIES_ERROR,\n    data,\n});\n","import axios from 'axios';\nimport { AnyAction } from 'redux';\nimport { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { fetchActivitiesError, fetchActivitiesSuccess } from './activityActions';\nimport { FETCH_ACTIVITIES } from './activityConstants';\nimport { Activity } from '../activityModels';\n\nconst getActivities = (id: number) => {\n    return axios.get<{ data: Activity[] }>(`http://localhost:8080/pulp-events/suggestions/events/${id}/activities`);\n};\n\nexport function* callActivities({ eventId }: AnyAction) {\n    try {\n        const response: { data: [] } = yield call(() => {\n            return getActivities(eventId);\n        });\n        yield put(\n            fetchActivitiesSuccess({\n                activities: response.data,\n            }),\n        );\n    } catch (e) {\n        yield put(\n            fetchActivitiesError({\n                error: 'Failed to Get Activities',\n            }),\n        );\n    }\n}\n\nexport default function* fetchActivitiesSaga() {\n    yield all([takeLatest(FETCH_ACTIVITIES, callActivities)]);\n}\n","import { FETCH_EVENT_TYPES, FETCH_EVENT_TYPES_ERROR, FETCH_EVENT_TYPES_SUCCESS } from './eventTypeConstants';\nimport {\n    FetchEventTypesFailureData,\n    FetchEventTypesFailureRequest,\n    FetchEventTypesRequest,\n    FetchEventTypesSuccessData,\n    FetchEventTypesSuccessRequest,\n} from '../EventTypeModels';\n\nexport const fetchEventTypes = (): FetchEventTypesRequest => ({\n    type: FETCH_EVENT_TYPES,\n});\n\nexport const fetchEventTypesSuccess = (data: FetchEventTypesSuccessData): FetchEventTypesSuccessRequest => ({\n    type: FETCH_EVENT_TYPES_SUCCESS,\n    data,\n});\n\nexport const fetchEventTypesError = (data: FetchEventTypesFailureData): FetchEventTypesFailureRequest => ({\n    type: FETCH_EVENT_TYPES_ERROR,\n    data,\n});\n","import axios from 'axios';\nimport { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { fetchEventTypesError, fetchEventTypesSuccess } from './eventTypeActions';\nimport { FETCH_EVENT_TYPES } from './eventTypeConstants';\nimport { EventType } from '../EventTypeModels';\n\nconst getEventTypes = () => axios.get<{ data: EventType[] }>('http://localhost:8080/pulp-events/suggestions/events');\n\nexport function* callEventTypes() {\n    try {\n        const response: { data: [] } = yield call(getEventTypes);\n        yield put(\n            fetchEventTypesSuccess({\n                eventTypes: response.data,\n            }),\n        );\n    } catch (e) {\n        yield put(\n            fetchEventTypesError({\n                error: 'Failed to Get Event Types',\n            }),\n        );\n    }\n}\n\nexport default function* fetchEventTypesSaga() {\n    yield all([takeLatest(FETCH_EVENT_TYPES, callEventTypes)]);\n}\n","import { all, fork } from 'redux-saga/effects';\nimport { createEventSaga } from './Events/CreateEvents/store/createEventSaga';\nimport fetchActivitiesSaga from './Suggestions/Activities/store/activitySaga';\nimport fetchEventTypesSaga from './Suggestions/EventTypes/store/eventTypeSaga';\n\nexport default function* rootSaga() {\n    yield all([\n        fork(fetchEventTypesSaga),\n        fork(fetchActivitiesSaga),\n        fork(createEventSaga),\n        // fork(createEventActivitiesSaga),\n    ]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware, logger));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React, { useEffect, useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { ActivityRequestModel, CreateEventRequestModel, EventFormData } from '../eventModels';\nimport Input from '@material-ui/core/input';\nimport Select from 'react-select';\nimport { EventTypesState } from '../../Suggestions/EventTypes/EventTypeModels';\nimport ReactDatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './createEvent.scss';\nimport CreatableSelect from 'react-select/creatable';\nimport { ActivitiesState, Activity } from '../../Suggestions/Activities/activityModels';\n\ntype Props = {\n    fetchEventTypes: () => void;\n    events: EventTypesState;\n    fetchActivities: (id: number) => void;\n    activityTypes: ActivitiesState;\n    CreateEvent: (data: CreateEventRequestModel) => void;\n};\n\nconst CreateEventComponent: React.FC<Props> = ({\n    events,\n    activityTypes,\n    fetchEventTypes,\n    fetchActivities,\n    CreateEvent,\n}) => {\n    useEffect(() => {\n        fetchEventTypes();\n    }, [fetchEventTypes]);\n\n    const eventTypes = events.eventTypes;\n    const [evntTypeId, setEvntTypeId] = useState<number>();\n    const [actvts, setActvts] = useState<ActivityRequestModel[]>();\n    const { handleSubmit, control } = useForm<EventFormData>();\n\n    const onEventTypeChange = (eventTypeId: number | undefined) => {\n        if (eventTypeId != undefined) {\n            setEvntTypeId(eventTypeId);\n            fetchActivities(eventTypeId);\n            setActvts([]);\n        }\n        console.log(eventTypeId);\n    };\n\n    const handleActivitiesCreate = (activityTypes: any) => {\n        const activities: ActivityRequestModel[] = [];\n        activityTypes.forEach((actvty: Activity) => {\n            const activity: ActivityRequestModel = {\n                activityTypeId: actvty.activityTypeId,\n                cost: actvty.cost,\n                createdDate: new Date(),\n                owner: 1,\n                dueDate: new Date(),\n            };\n            activities.push(activity);\n        });\n        setActvts(activities);\n        console.log(actvts);\n    };\n\n    const onSubmit = (data: EventFormData) => {\n        console.log(data);\n        const eventData: CreateEventRequestModel = {\n            name: data.name,\n            eventTypeId: evntTypeId ? evntTypeId : 0,\n            userId: 1,\n            date: data.date,\n            location: data.location,\n            createdDate: new Date(),\n            owner: data.owner,\n            budget: data.budget,\n            activities: actvts,\n        };\n\n        CreateEvent(eventData);\n    };\n\n    return (\n        <>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"form\">\n                <div className=\"eventform\">\n                    <div>\n                        <section>\n                            <label>Name</label>\n                            <Controller\n                                name=\"name\"\n                                control={control}\n                                defaultValue=\"\"\n                                render={({ field }) => <Input disableUnderline className=\"input\" {...field} />}\n                            />\n                        </section>\n                    </div>\n                    <div>\n                        <section>\n                            <label>Event Type</label>\n                            <Controller\n                                name=\"eventTypeId\"\n                                control={control}\n                                render={() => (\n                                    <Select\n                                        defaultValue={eventTypes[0]}\n                                        isClearable\n                                        options={eventTypes}\n                                        getOptionLabel={(option) => option.eventTypeName}\n                                        getOptionValue={(option) => '' + option.eventTypeId}\n                                        onChange={(e) => {\n                                            onEventTypeChange(e?.eventTypeId);\n                                        }}\n                                        className=\"input\"\n                                    />\n                                )}\n                            />\n                        </section>\n                    </div>\n\n                    <div>\n                        <section>\n                            <label>Where</label>\n                            <Controller\n                                name=\"location\"\n                                control={control}\n                                defaultValue=\"\"\n                                render={({ field }) => <Input disableUnderline {...field} className=\"input\" />}\n                            />\n                        </section>\n                    </div>\n                    <div className=\"event-date-cost\">\n                        <section>\n                            When\n                            <Controller\n                                name=\"date\"\n                                control={control}\n                                render={({ field }) => (\n                                    <ReactDatePicker\n                                        className=\"date-field\"\n                                        placeholderText=\"Time\"\n                                        showPreviousMonths\n                                        onChange={(e) => field.onChange(e)}\n                                        selected={field.value}\n                                        minDate={new Date()}\n                                        calendarClassName=\"event-date\"\n                                        dateFormat=\"MM-dd-yyyy\"\n                                    />\n                                )}\n                            />\n                            Cost\n                            <Controller\n                                name=\"budget\"\n                                control={control}\n                                defaultValue=\"\"\n                                render={({ field }) => <Input disableUnderline {...field} className=\"event-cost\" />}\n                            />\n                        </section>\n                    </div>\n                    <div>\n                        <section>\n                            <label>Who</label>\n                            <Controller\n                                name=\"owner\"\n                                control={control}\n                                defaultValue=\"\"\n                                render={({ field }) => <Input disableUnderline {...field} className=\"input\" />}\n                            />\n                        </section>\n                    </div>\n                    {activityTypes && activityTypes.activities && (\n                        <div>\n                            <section>\n                                <label>Activity Type</label>\n                                <Controller\n                                    name=\"activities\"\n                                    control={control}\n                                    render={() => (\n                                        <CreatableSelect\n                                            defaultValue={activityTypes.activities[0]}\n                                            isClearable\n                                            isMulti\n                                            options={activityTypes.activities}\n                                            getOptionLabel={(option) => option.activityTypeName}\n                                            getOptionValue={(option) => '' + option.activityTypeId}\n                                            className=\"input\"\n                                            onChange={(e) => handleActivitiesCreate(e)}\n                                        />\n                                    )}\n                                />\n                            </section>\n                        </div>\n                    )}\n\n                    <div>\n                        <input type=\"submit\" className=\"button\" />\n                    </div>\n                </div>\n            </form>\n        </>\n    );\n};\n\nexport default CreateEventComponent;\n","import { connect } from 'react-redux';\nimport { RootState } from '../../reducers';\nimport CreateEventComponent from './createEvent';\nimport { fetchEventTypes } from '../../Suggestions/EventTypes/store/eventTypeActions';\nimport { fetchActivities } from '../../Suggestions/Activities/store/activityActions';\nimport { CreateEvent } from '../CreateEvents/store/createEventActions';\n\nconst mapStateToProps = (state: RootState) => ({\n    events: state.events,\n    activityTypes: state.activities,\n});\n\nconst dispatchActions = {\n    fetchEventTypes,\n    fetchActivities,\n    CreateEvent,\n};\n\nexport default connect(mapStateToProps, dispatchActions)(CreateEventComponent);\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './home.scss';\n\nconst Home: React.FC = () => {\n    const history = useHistory();\n    const onLogin = () => {\n        history.push('/suggestions/eventTypes');\n    };\n\n    return (\n        <div>\n            <button onClick={onLogin}>Login</button>\n        </div>\n    );\n};\n\nexport default Home;\n","import React, { useEffect } from 'react';\nimport './activity.scss';\nimport { ActivitiesState } from './activityModels';\nimport ReactTooltip from 'react-tooltip';\nimport { RouteComponentProps, useHistory, useParams } from 'react-router-dom';\n\ntype Props = {\n    fetchActivities: (eventId: number) => void;\n    activities: ActivitiesState;\n};\n\ninterface RouteParams {\n    id: string;\n}\n\nconst Activity: React.FC<Props & RouteComponentProps<any>> = ({ activities, fetchActivities }) => {\n    const params = useParams<RouteParams>();\n    const eventId: number = +params.id;\n\n    useEffect(() => {\n        fetchActivities(eventId);\n    }, [fetchActivities, eventId]);\n\n    const acvts = activities.activities;\n\n    const history = useHistory();\n\n    const onLogout = () => {\n        history.push('/');\n    };\n\n    return (\n        <>\n            <div className=\"activities\">\n                {acvts.map((activity) => (\n                    <div key={activity.activityTypeId}>\n                        <ReactTooltip className=\"tooltip\" />\n                        <div className=\"activity\" data-tip={activity.activityTypeName}>\n                            {activity.activityTypeDescription}\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <button onClick={onLogout}>Logout</button>\n        </>\n    );\n};\n\nexport default Activity;\n","import { connect } from 'react-redux';\nimport { RootState } from '../../reducers';\nimport Activity from './activity';\nimport { fetchActivities } from './store/activityActions';\n\nconst mapStateToProps = (state: RootState) => ({\n    activities: state.activities,\n});\n\nconst dispatchActions = {\n    fetchActivities,\n};\n\nexport default connect(mapStateToProps, dispatchActions)(Activity);\n","import CreateEvent from './Events/CreateEvents/index';\nimport Home from './Home/home';\nimport RouteType from './route-type';\nimport Activities from './Suggestions/Activities';\n\nconst routes: RouteType[] = [\n    {\n        path: '/suggestions/eventTypes',\n        component: CreateEvent,\n    },\n    {\n        path: '/suggestions/events/:id/activities',\n        component: Activities,\n    },\n    {\n        path: '/',\n        component: Home,\n    },\n];\n\nexport default routes;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { BrowserRouter, Route, Switch, RouteComponentProps } from 'react-router-dom';\nimport routes from './routes';\n\nconst App: React.FC = () => {\n    return (\n        <div>\n            <BrowserRouter>\n                <Switch>\n                    {routes.map((route, index) => {\n                        return (\n                            <Route\n                                key={index}\n                                path={route.path}\n                                render={(props: RouteComponentProps<any>) => (\n                                    <route.component {...props} {...route.props} />\n                                )}\n                            />\n                        );\n                    })}\n                </Switch>\n            </BrowserRouter>\n        </div>\n    );\n};\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.querySelector('#root'),\n);\n"],"sourceRoot":""}